<?php

/**
 * @file
 * Module code for Hosting task garbage collection
 */

/**
 * Implements hook_hosting_queues().
 *
 * Return a list of queues that this module needs to manage.
 */
function hosting_task_gc_hosting_queues() {
  $count = hosting_task_gc_count_sites();
  $queue['task_gc'] = array(
    'name' => t('Task GC'),
    'description' => t('Process the garbage collection of task logs.'),
    // Run queue sequentially. always with the same parameters.
    'type' => HOSTING_QUEUE_TYPE_BATCH,
    'frequency' => strtotime("1 hour", 0),
    'items' => 20,
    'total_items' => $count,
    'min_threads' => 6,
    'max_threads' => 12,
    'threshold' => 100,
    'singular' => t('site'),
    'plural' => t('sites'),
  );
  return $queue;
}

/**
 * The main queue callback task_gc.
 */
function hosting_task_gc_queue() {
  global $user;

  // Prevent session information from being saved while queue is running.
  $original_session_saving = drupal_save_session();
  drupal_save_session(FALSE);

  // Switch to the super user.
  $old_user = $user;
  $user = user_load(1);

  $result = hosting_task_gc_list_sites();
  while ($site = $result->fetchObject()) {
    $query = "SELECT nid FROM {hosting_task} WHERE rid = :nid";
    $tasks_to_remove = db_query($query, array(':nid' => $site->nid));
    while ($row = $tasks_to_remove->fetchObject()) {
      node_delete($row->nid);
      watchdog('hosting_task_gc', 'Deleted task node with nid @nid.', array('@nid' => $row->nid));
    }
  }

  // Restore the user.
  $user = $old_user;
  drupal_save_session($original_session_saving);

  // Look for orphaned task log entries.
  $query = "SELECT DISTINCT h.vid
              FROM {hosting_task_log} h
                LEFT OUTER JOIN {node_revision} n ON h.vid = n.vid
              WHERE n.vid IS NULL LIMIT 100";
  $result = db_query($query);
  while ($revision = $result->fetchObject()) {
    $num = db_delete('hosting_task_log')
      ->condition('vid', $revision->vid)
      ->execute();
    watchdog('hosting_task_gc', 'Deleted @num orphaned task log entries with vid @vid.', array('@num' => $num, '@vid' => $revision->vid));
  }
}

/**
 * Prepare a list of sites with garbage to collect.
 *
 * @return DatabaseStatementInterface
 *   A result object.
 */
function hosting_task_gc_list_sites() {
  $query = "SELECT DISTINCT s.nid "
          . "FROM {hosting_site} s INNER JOIN {hosting_task} t ON s.nid = t.rid "
          . "WHERE s.status = :status LIMIT 5";
  return db_query($query, array(':status' => HOSTING_SITE_DELETED));
}

/**
 * Get the number of sites with garbage to collect.
 *
 * @return int
 *   The number of sites.
 */
function hosting_task_gc_count_sites() {
  // This query can be super expensive to run, so only run it once every hour.
  if ($cache = cache_get(__FUNCTION__)) {
    return $cache->data;
  }
  else {
    $query = "SELECT COUNT(DISTINCT s.nid) AS num_sites "
      . "FROM {hosting_site} s INNER JOIN {hosting_task} t ON s.nid = t.rid "
      . "WHERE s.status = :status";
    $result = db_query($query, array(':status' => HOSTING_SITE_DELETED))->fetchField();
    cache_set(__FUNCTION__, $result, 'cache', REQUEST_TIME + 3600);
    return $result;
  }
}

/**
 * Implements hook_node_update().
 */
function hosting_task_gc_node_update($node) {
  if ($node->type == "site") {
    if (isset($node->site_status) && $node->site_status == HOSTING_SITE_DELETED) {
      cache_clear_all('hosting_task_gc_count_sites', 'cache');
    }
  }
}
